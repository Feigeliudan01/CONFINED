#Download and install Rcpp and Rcpp Armadillo
library(Rcpp)
installed.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c("Rcpp", "RcppArmadillo"))
#Download and install Rcpp and Rcpp Armadillo
library(Rcpp)
library(RcppArmadillo)
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("~/Downloads/rcppCCA.cpp")
#General function for solving CCA
#Takes two matrices, X,Y of size mXn_1 and mXn_2, where m>n_1,n_2
CCA = function (X, Y){
tmp<-doRCCA(X, Y)
#loadings to project that data into maximally correlated space
A<-tmp[[1]]
B<-tmp[[2]]
#there are only d canonical varibles
d = min(c(dim(A)[2], dim(B)[2]))
# s = min(dim(Y_dataframe)[1],dim(X_dataframe)[1]) - 1.
A = A[,1:d]
B = B[,1:d]
#return the canonical variables (after doing some centering)
U = getUV(X, A)
V = getUV(Y, B)
return(list(A= A, B= B, U = U, V = V))
}
#CONFINED's feature selection step
get_ranked_features = function (X_, Y_, thresh=.95){
#First get a low rank form of the canonical variables
tmp = CCA(X_,Y_)
ncol=sum(sapply(1:10, function(i) cor(tmp$U[,i], tmp$V[,i]))>= thresh)
if(ncol < 1){
message("Select lower correlation threshold, all canonical variables
have correlation < thresh")
stopifnot(ncol > 0)
}
#Now get a low-rank, correlated form of the input matrices
Xtilde = t(centerCPP(X_)) %*% tmp$U[,1:ncol] %*% t(tmp$U)[1:ncol, ]
Ytilde = t(centerCPP(Y_)) %*% tmp$V[,1:ncol] %*% t(tmp$V)[1:ncol, ]
#Get the correlation of the low-rank and raw input-matrices' rows
X_feat_cors  = sapply(1:dim(tmp$U)[1], function(i) cor(X_[i,], Xtilde[,i]))
Y_feat_cors  = sapply(1:dim(tmp$V)[1], function(i) cor(Y_[i,], Ytilde[,i]))
#Average them, then sort them
feat_cors         = (X_feat_cors + Y_feat_cors)/2.
feat_cors_sort    = sort(feat_cors, index.return=T, decreasing = T)
UV_T_ranked_index = feat_cors_sort$ix
#Return the most correlated indices
return(UV_T_ranked_index )
}
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("~/Downloads/rcppCCA.cpp")
message("Successfully compiled cpp code")
#Download and install Rcpp and Rcpp Armadillo
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("~/Downloads/rcppCCA.cpp")
message("Successfully compiled cpp code")
#General function for solving CCA
#Takes two matrices, X,Y of size mXn_1 and mXn_2, where m>n_1,n_2
CCA = function (X, Y){
tmp<-doRCCA(X, Y)
#loadings to project that data into maximally correlated space
A<-tmp[[1]]
B<-tmp[[2]]
#there are only d canonical varibles
d = min(c(dim(A)[2], dim(B)[2]))
# s = min(dim(Y_dataframe)[1],dim(X_dataframe)[1]) - 1.
A = A[,1:d]
B = B[,1:d]
#return the canonical variables (after doing some centering)
U = getUV(X, A)
V = getUV(Y, B)
return(list(A= A, B= B, U = U, V = V))
}
#CONFINED's feature selection step
get_ranked_features = function (X_, Y_, thresh=.95){
#First get a low rank form of the canonical variables
tmp = CCA(X_,Y_)
ncol=sum(sapply(1:10, function(i) cor(tmp$U[,i], tmp$V[,i]))>= thresh)
if(ncol < 1){
message("Select lower correlation threshold, all canonical variables
have correlation < thresh")
stopifnot(ncol > 0)
}
#Now get a low-rank, correlated form of the input matrices
Xtilde = t(centerCPP(X_)) %*% tmp$U[,1:ncol] %*% t(tmp$U)[1:ncol, ]
Ytilde = t(centerCPP(Y_)) %*% tmp$V[,1:ncol] %*% t(tmp$V)[1:ncol, ]
#Get the correlation of the low-rank and raw input-matrices' rows
X_feat_cors  = sapply(1:dim(tmp$U)[1], function(i) cor(X_[i,], Xtilde[,i]))
Y_feat_cors  = sapply(1:dim(tmp$V)[1], function(i) cor(Y_[i,], Ytilde[,i]))
#Average them, then sort them
feat_cors         = (X_feat_cors + Y_feat_cors)/2.
feat_cors_sort    = sort(feat_cors, index.return=T, decreasing = T)
UV_T_ranked_index = feat_cors_sort$ix
#Return the most correlated indices
return(UV_T_ranked_index )
}
# X1, X2 - Input matrices like CCA, same number of rows, but not necessarily columns
# t - number of rows (e.g. methylation sites) to use
# k - number of CONFINED components to produce
CONFINED<-function(X1, X2, t, k, thresh=.95){
]
source("~/CONFINED.R")
tst<-c(1,2,4,4,4,4,5,5,6,6)
write.table(tst, row.names=F, col.names=F, file="tst.txt")
help("tryCatch")
install.packages("CCA")
CCA::cc()
CCA::cc
CCA::rcc
CCA::geigen
geigen
library(CCA)
geigen
chol
svd2
library(data.table)
install.packages("data.table")
dat<-fread("~/Downloads/demo_datafile.txt")
library(data.table)
dat<-fread("~/Downloads/demo_datafile.txt")
dim(dat)
dat[1:3,1:3]
tst<-read.table("~/Downloads/demo_data1.txt")
tst[1:3,1:3]
tst<-fread("~/Downloads/demo_data1.txt")
rm(ls())
tst<-read.table("~/Downloads/demo_data1.txt")
dat1<-read.table("~/Downloads/demo_data1.txt")
rm(tst)
rm(dat)
dat2<-read.table("~/Downloads/demo_data2.txt")
source("CONFINED.R")
source("CONFINED.R")
CONFINED(X1=dat1, X2=dat2, t= 3000, k =10)
CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10)
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10)
get_all_linear_r_squared = function(R_houseman_matrix, X_matrix, max_number_vec){
result =  sapply(1:max_number_vec, function(i) sapply(1:dim(R_houseman_matrix)[2],
function(j) summary(lm(R_houseman_matrix[,j] ~ X_matrix[,1:i]))$r.squared))
return(result)
}
cell1<-as.matrix(read.table("~/Downloads/demo_cellcomp1.txt"))
get_all_linear_r_squared(R_houseman_matrix = cell1, max_number_vec = 10, X_matrix = res$X1_comps)
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10)
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10, outfile = "demo")
source("CONFINED.R")
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10, outfile = "demo")
source("CONFINED.R")
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10, outfile = "demo")
dat2<-t(dat2)
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(dat2), t= 3000, k =10, outfile = "demo")
source("CONFINED.R")
res<-CONFINED(X1=as.matrix(dat1), X2=as.matrix(t(dat2)), t= 3000, k =10, outfile = "demo")
source("CONFINED.R")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
results<-CONFINED(X1=dat, X2=dat2, t=3000, k=10, outfile="demo")
results<-CONFINED(X1=dat1, X2=dat2, t=3000, k=10, outfile="demo")
source("CONFINED.R")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
results<-CONFINED(X1=dat1, X2=dat2, t=3000, k=10, outfile="demo")
source("CONFINED.R")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
results<-CONFINED(X1=dat1, X2=dat2, t=3000, k=10, outfile="demo")
cellests1<-read.table(file = "~/Downloads/demo_cellcomp1.txt")
cellests1
result =  sapply(1:dim(results$X1_comps)[2], function(i) sapply(1:dim(cellests1)[2],
function(j) summary(lm(cellests1[,j] ~ results$X1_comps[,1:i]))$r.squared))
)
sapply(1:dim(results$X1_comps)[2], function(i) sapply(1:dim(cellests1)[2],
function(j) summary(lm(cellests1[,j] ~ results$X1_comps[,1:i]))$r.squared) )
)
sapply(1:10, function(i) sapply(1:dim(cellests1)[2],
function(j) summary(lm(cellests1[,j] ~ results$X1_comps[,1:i]))$r.squared) )
source("CONFINED.R")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
results<-CONFINED(X1=dat1, X2=dat2, t=3000, k=10, outfile="demo")
cellests1<-read.table(file = "~/Downloads/demo_cellcomp1.txt")
sapply(1:10, function(i) sapply(1:dim(cellests1)[2], function(j) summary(lm(cellests1[,j] ~ results$X1_comps[,1:i]))$r.squared) )
cellests2<-read.table(file = "~/Downloads/demo_cellcomp2.txt")
sapply(1:10, function(i) sapply(1:dim(cellests2)[2], function(j) summary(lm(cellests2[,j] ~ results$X2_comps[,1:i]))$r.squared) )
install.packages("devtools")
install.packages("roxygen2")
devtools::create("CONFINED")
library(devtools)
install.packages("devtools")
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
install.packages("roxygen2")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("roxygen2")
install.packages("xml2")
install.packages("~/Downloads/roxygen2_6.1.1.tgz", repos=NULL, type="source")
devtools::create("CONFINED")
Rcpp::sourceCpp("rcppCCA.cpp")
devtools::document
devtools::document()
devtools::document()
devtools::document()
install.packages("devtools")
install.packages("git2r")
install.packages("zlib")
install.packages("zlib")
install.packages("git2r")
install.packages("devtools")
install.packages("roxygen2")
install.packages("xml2")
install.packages("xml2")
install.packages("roxygen2")
Rcpp::sourceCpp("CONFINED/tools/rcppCCA.cpp")
Rcpp::sourceCpp("CONFINED/tools/rcppCCA.cpp")
library(Rcpp)
library(RcppArmadillo)
source("rcppCCA.cpp")
sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
library(ggplot2)
install.packages("ggplot2")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("rxoygen2")
install.packages("roxygen2")
library(roxygen2)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("RcppArmadillo")
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
?sourceCpp
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
Rcpp::sourceCpp("rcppCCA.cpp")
doRCCA()
doRCCA
devtools::install_github("wilkelab/cowplot")
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("rcppCCA.cpp")
#Download and install Rcpp and Rcpp Armadillo
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("rcppCCA.cpp")
#Download and install Rcpp and Rcpp Armadillo
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("rcppCCA.cpp")
#Download and install Rcpp and Rcpp Armadillo
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("rcppCCA.cpp")
install.packages("Rtools")
#Download and install Rcpp and Rcpp Armadillo
message("Loading CONFINED, ultra-fast CCA")
library(Rcpp)
library(RcppArmadillo)
message("Loaded Rcpp, compiling cpp code")
#This is a C++ file with the code written for the method
#It should be available where this file was downloaded
sourceCpp("rcppCCA.cpp")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
cellests1<-read.table(file = "~/Downloads/demo_cellcomp1.txt")
cellests2<-read.table(file = "~/Downloads/demo_cellcomp2.txt")
dat1[1:3,1:3]
cellests1[1:3,1:3]
cellests1<-cellests1[1:205,]
dat1<-dat1[,1:205]
cellests2<-cellests2[1:190,]
dat2<-dat2[,1:190]
write.table(dat1, "demo_data1.txt", sep='\t', quote=F)
write.table(dat2, "demo_data2.txt", sep='\t', quote=F)
write.table(cellests1, "demo_cellcomp1.txt", sep='\t', quote=F)
write.table(cellests2, "demo_cellcomp2.txt", sep='\t', quote=F)
library(CONFINED)
results<-CONFINED(dat1, dat2, t=3000, k=10, outfile = "demo")
library(devtools)
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
install_github("cozygene/CONFINED", auth_token = 508fa230aa7289ac0fe9090b054d4174983d90fd)
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
library(CONFINED)
dat1<-read.table("demo_data1.txt")
dat2<-read.table("demo_data2.txt")
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
library(CONFINED)
tst<-CCA(dat1,dat2)
devtools::document()
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
library(devtools)
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
CONFINED
library(CONFINED)
doRCCA
CCA
doRCCA
doRCCA()
library(devtools)
install_github("cozygene/CONFINED", auth_token = "508fa230aa7289ac0fe9090b054d4174983d90fd")
library(devtools)
install_github
install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
library(CONFINED)
doRCCA
devtools::document()
RcppArmadillo::RcppArmadillo.package.skeleton(package="CONFINED", path="~")
RcppArmadillo::RcppArmadillo.package.skeleton(name = "CONFINED", path = "~")
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
library(CONFINED)
CONFINED::CCA(matrix(0,nrow=10, ncol=5), matrix(0,nrow=10, ncol=4))
dat1<-read.table("~/Downloads/demo_data1.txt")
dat2<-read.table("~/Downloads/demo_data2.txt")
library(CONFINED)
CCA(dat1,dat2)
results<-CONFINED(X1=dat1, X2=dat2, t=3000, k=10, outfile="demo")
cellests1<-read.table(file = "~/Downloads/demo_cellcomp1.txt")
sapply(1:10, function(i) sapply(1:dim(cellests1)[2], function(j) summary(lm(cellests1[,j] ~ results$X1_comps[,1:i]))$r.squared) )
cellests2<-read.table(file = "~/Downloads/demo_cellcomp2.txt")
sapply(1:10, function(i) sapply(1:dim(cellests2)[2], function(j) summary(lm(cellests2[,j] ~ results$X2_comps[,1:i]))$r.squared) )
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
?system.time
?CONFINED
?CONFINED::CONFINED
library(CONFINED)
?CONFINED
load_all()
library(debtools)
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
dat1<-read.table("~/Desktop/CONFINED_demo/demo_data1.txt")
dat2<-read.table("~/Desktop/CONFINED_demo/demo_data2.txt")
system.time(CONFINED(dat1, dat2, 3000, 10, outfile="demo"))
library(CONFINED)
dat1<-read.table("~/Desktop/CONFINED_demo/demo_data1.txt")
dat2<-read.table("~/Desktop/CONFINED_demo/demo_data2.txt")
system.time(CONFINED(dat1, dat2, 3000, 10, outfile="demo"))
system.time(CONFINED(dat1, dat2, 3000, 10, outfile="demo"))
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
devtools::install_github("cozygene/CONFINED", auth_token = "ed44747c8bd9539c8872283984a743418e2acc66")
dat1<-read.table(“~/Desktop/CONFINED_demo/demo_data1.txt”)
dat2<-read.table(“~/Desktop/CONFINED_demo/demo_data2.txt”)
system.time(CONFINED(dat1, dat2, 3000, 10, outfile=“demo”))
dat1<-read.table("~/Desktop/CONFINED_demo/demo_data1.txt")
dat2<-read.table("~/Desktop/CONFINED_demo/demo_data2.txt")
system.time(CONFINED(dat1, dat2, 3000, 10, outfile="demo"))
devtools::install_github("cozygene/CONFINED")
?CONFINED
?CONFINED::CONFINED
setwd("CONFINED/")
devtools::document()
load_all()
devtools::load_all()
?CONFINED::CCA
?CONFINED::CONFINED
devtools::install_github("cozygene/CONFINED")
