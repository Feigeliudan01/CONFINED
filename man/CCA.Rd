% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CONFINED.R
\name{CCA}
\alias{CCA}
\title{General function for quickly performing canonical correlation analysis (CCA)}
\usage{
CCA(X, Y)
}
\arguments{
\item{X}{\eqn{m} by \eqn{n_1} matrix}

\item{Y}{\eqn{m} by \eqn{n_2} matrix}
}
\value{
A  -  the loadings for \eqn{X}

B  -  the loadings for \eqn{Y}

U  -  canonical variables of \eqn{X}, calculated by column centering \eqn{X} and projecting it on \eqn{A}

V  -  canonical variables of \eqn{Y}, calculated by column centering \eqn{Y} and projecting it on \eqn{B}

cors - the correlations of each corresponding pair of canonical variables e.g. cor_\eqn{i} = corr(U[, \eqn{i} ], V[, \eqn{i} ])
}
\description{
This function performs CCA on two matrices. As input, it takes
two matrices, \eqn{X} and \eqn{Y},  of size \eqn{m} by \eqn{n_1} and 
\eqn{m} by \eqn{n_2} respectively, where \eqn{m}>\eqn{n_1},\eqn{n_2} (i.e., both 
matrices have the same number of rows, but not necessarily the same
number of columns). This code is based on the algorithm by
Gonzalez and Dejean from the package '\code{CCA},' we just simply translated
it to C++ using functions from RcppArmadillo for speed. The canonical variables are returned
in decreasing order or correlation.
}
